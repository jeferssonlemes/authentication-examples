@{
    ViewData["Title"] = "Produtos";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-box me-2"></i>Catálogo de Produtos</h2>
            <p class="text-muted mb-0">Gerencie todos os produtos do sistema</p>
        </div>
        <div>
            <button id="btnCreateProduct" class="btn btn-primary" onclick="createProduct()" style="display: none;">
                <i class="fas fa-plus me-1"></i>Novo Produto
            </button>
            <button id="btnAdminStats" class="btn btn-warning ms-2" onclick="loadAdminStats()" style="display: none;">
                <i class="fas fa-chart-bar me-1"></i>Estatísticas Admin
            </button>
        </div>
    </div>

    <div id="productsContent">
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
            <p class="mt-2">Carregando produtos...</p>
        </div>
    </div>
    
    <div id="productsData" style="display: none;">
        <!-- Filtros -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" placeholder="Buscar produtos..." id="searchInput">
                </div>
            </div>
            <div class="col-md-4">
                <select class="form-select" id="categoryFilter">
                    <option value="">Todas as categorias</option>
                </select>
            </div>
        </div>

        <!-- Lista de produtos -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-list me-2"></i>Lista de Produtos 
                    <span class="badge bg-secondary ms-2" id="totalProducts">0</span>
                </h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Nome</th>
                                <th>Categoria</th>
                                <th>Preço</th>
                                <th>Estoque</th>
                                <th>Status</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody id="productsTable">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Categorias -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-tags me-2"></i>Categorias</h5>
                    </div>
                    <div class="card-body">
                        <div class="row" id="categoriesContainer">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Mostrar navbar
        document.getElementById('mainNav').style.display = 'block';
        
        // Verificar autenticação
        checkAuthentication();
        
        // Verificar permissões e mostrar/ocultar elementos
        checkPermissions();
        
        // Carregar dados dos produtos
        loadProductsData();
        loadCategories();
        
        async function loadProductsData() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/products', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Atualizar total
                    document.getElementById('totalProducts').textContent = data.totalProdutos;
                    
                    // Preencher tabela
                    const tbody = document.getElementById('productsTable');
                    tbody.innerHTML = '';
                    
                    data.produtos.forEach(produto => {
                        const statusClass = produto.status === 'Ativo' ? 'success' : 'danger';
                        const estoqueClass = produto.estoque > 0 ? 'text-success' : 'text-danger';
                        
                        const row = `
                            <tr>
                                <td>${produto.id}</td>
                                <td><strong>${produto.nome}</strong></td>
                                <td><span class="badge bg-light text-dark">${produto.categoria}</span></td>
                                <td><strong>${new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(produto.preco)}</strong></td>
                                <td class="${estoqueClass}"><strong>${produto.estoque}</strong></td>
                                <td><span class="badge bg-${statusClass}">${produto.status}</span></td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" onclick="viewProduct(${produto.id})">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-secondary btn-edit-product" onclick="editProduct(${produto.id})" style="display: none;">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-delete-product" onclick="deleteProduct(${produto.id})" style="display: none;">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    });
                    
                    // Mostrar dados
                    document.getElementById('productsContent').style.display = 'none';
                    document.getElementById('productsData').style.display = 'block';
                    
                    // Aplicar permissões aos botões da tabela
                    checkPermissions();
                } else {
                    throw new Error('Erro ao carregar produtos');
                }
            } catch (error) {
                document.getElementById('productsContent').innerHTML = 
                    '<div class="alert alert-danger"><i class="fas fa-exclamation-triangle me-2"></i>Erro ao carregar produtos</div>';
            }
        }
        
        async function loadCategories() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/products/categories', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const categories = await response.json();
                    
                    // Preencher select
                    const select = document.getElementById('categoryFilter');
                    categories.forEach(cat => {
                        const option = document.createElement('option');
                        option.value = cat.nome;
                        option.textContent = cat.nome;
                        select.appendChild(option);
                    });
                    
                    // Preencher cards de categoria
                    const container = document.getElementById('categoriesContainer');
                    categories.forEach(cat => {
                        const card = `
                            <div class="col-md-2 mb-3">
                                <div class="card text-center">
                                    <div class="card-body">
                                        <i class="fas fa-tag fa-2x text-primary mb-2"></i>
                                        <h6>${cat.nome}</h6>
                                        <small class="text-muted">${cat.total} produtos</small>
                                    </div>
                                </div>
                            </div>
                        `;
                        container.innerHTML += card;
                    });
                }
            } catch (error) {
                console.error('Erro ao carregar categorias:', error);
            }
        }
        
        function checkPermissions() {
            const userData = JSON.parse(localStorage.getItem('user_data') || '{}');
            const userRole = userData.role;
            
            // Verificar permissões baseadas no role
            if (userRole === 'Admin') {
                // Admin pode fazer tudo
                document.getElementById('btnCreateProduct').style.display = 'inline-block';
                document.getElementById('btnAdminStats').style.display = 'inline-block';
                showEditDeleteButtons(true, true);
            } else if (userRole === 'Moderator') {
                // Moderator pode criar e editar, mas não deletar
                document.getElementById('btnCreateProduct').style.display = 'inline-block';
                showEditDeleteButtons(true, false);
            } else {
                // User comum só pode visualizar
                showEditDeleteButtons(false, false);
            }
        }
        
        function showEditDeleteButtons(canEdit, canDelete) {
            // Esta função será chamada após carregar os produtos para mostrar/ocultar botões
            setTimeout(() => {
                const editButtons = document.querySelectorAll('.btn-edit-product');
                const deleteButtons = document.querySelectorAll('.btn-delete-product');
                
                editButtons.forEach(btn => {
                    btn.style.display = canEdit ? 'inline-block' : 'none';
                });
                
                deleteButtons.forEach(btn => {
                    btn.style.display = canDelete ? 'inline-block' : 'none';
                });
            }, 500);
        }
        
        function viewProduct(id) {
            alert('Visualizar produto ID: ' + id);
        }
        
        async function createProduct() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/products', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        nome: 'Produto Teste',
                        categoria: 'Teste',
                        preco: 99.99
                    })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    alert(result.message);
                    loadProductsData(); // Recarregar lista
                } else if (response.status === 403) {
                    alert('Você não tem permissão para criar produtos!');
                } else {
                    throw new Error('Erro ao criar produto');
                }
            } catch (error) {
                alert('Erro: ' + error.message);
            }
        }
        
        async function editProduct(id) {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch(`/api/products/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        nome: 'Produto Editado',
                        categoria: 'Editado',
                        preco: 199.99
                    })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    alert(result.message);
                } else if (response.status === 403) {
                    alert('Você não tem permissão para editar produtos!');
                } else {
                    throw new Error('Erro ao editar produto');
                }
            } catch (error) {
                alert('Erro: ' + error.message);
            }
        }
        
        async function deleteProduct(id) {
            if (!confirm('Tem certeza que deseja excluir este produto?')) return;
            
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch(`/api/products/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    alert(result.message);
                    loadProductsData(); // Recarregar lista
                } else if (response.status === 403) {
                    alert('Você não tem permissão para excluir produtos!');
                } else {
                    throw new Error('Erro ao excluir produto');
                }
            } catch (error) {
                alert('Erro: ' + error.message);
            }
        }
        
        async function loadAdminStats() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/products/admin/stats', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const stats = await response.json();
                    alert(`Estatísticas Admin:\n\nTotal de Produtos: ${stats.totalProducts}\nProdutos com Estoque Baixo: ${stats.lowStockProducts}\nAdicionados Recentemente: ${stats.recentlyAdded}`);
                } else if (response.status === 403) {
                    alert('Você não tem permissão para ver estatísticas administrativas!');
                } else {
                    throw new Error('Erro ao carregar estatísticas');
                }
            } catch (error) {
                alert('Erro: ' + error.message);
            }
        }
    </script>
} 