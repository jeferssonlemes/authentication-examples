@{
    ViewData["Title"] = "Usuários";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-users me-2"></i>Gerenciamento de Usuários</h2>
            <p class="text-muted mb-0">Administre todos os usuários do sistema</p>
        </div>
        <div>
            <button id="btnCreateUser" class="btn btn-primary" onclick="createUser()" style="display: none;">
                <i class="fas fa-user-plus me-1"></i>Novo Usuário
            </button>
            <button id="btnUserPermissions" class="btn btn-warning ms-2" onclick="loadUserPermissions()" style="display: none;">
                <i class="fas fa-key me-1"></i>Gerenciar Permissões
            </button>
        </div>
    </div>

    <div id="usersContent">
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
            <p class="mt-2">Carregando usuários...</p>
        </div>
    </div>
    
    <div id="usersData" style="display: none;">
        <!-- Estatísticas -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-white bg-primary">
                    <div class="card-body text-center">
                        <h3 id="totalUsuarios">0</h3>
                        <p class="mb-0">Total de Usuários</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-success">
                    <div class="card-body text-center">
                        <h3 id="usuariosAtivos">0</h3>
                        <p class="mb-0">Usuários Ativos</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-info">
                    <div class="card-body text-center">
                        <h3 id="admins">0</h3>
                        <p class="mb-0">Administradores</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-warning">
                    <div class="card-body text-center">
                        <h3 id="moderadores">0</h3>
                        <p class="mb-0">Moderadores</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de usuários -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-list me-2"></i>Lista de Usuários
                    <span class="badge bg-secondary ms-2" id="totalUsuariosList">0</span>
                </h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Nome</th>
                                <th>Email</th>
                                <th>Perfil</th>
                                <th>Status</th>
                                <th>Cadastro</th>
                                <th>Último Acesso</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody id="usersTable">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Mostrar navbar
        document.getElementById('mainNav').style.display = 'block';
        
        // Verificar autenticação
        checkAuthentication();
        
        // Verificar permissões
        checkUserPermissions();
        
        // Carregar dados dos usuários
        loadUsersData();
        
        async function loadUsersData() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/users', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Atualizar totais
                    document.getElementById('totalUsuarios').textContent = data.totalUsuarios;
                    document.getElementById('usuariosAtivos').textContent = data.usuariosAtivos;
                    document.getElementById('totalUsuariosList').textContent = data.totalUsuarios;
                    
                    // Preencher tabela
                    const tbody = document.getElementById('usersTable');
                    tbody.innerHTML = '';
                    
                    data.usuarios.forEach(usuario => {
                        const statusClass = usuario.ativo ? 'success' : 'danger';
                        const statusText = usuario.ativo ? 'Ativo' : 'Inativo';
                        const perfilClass = usuario.perfil === 'Administrador' ? 'danger' : 
                                           usuario.perfil === 'Moderador' ? 'warning' : 'primary';
                        
                        const row = `
                            <tr>
                                <td>${usuario.id}</td>
                                <td><strong>${usuario.nome}</strong></td>
                                <td>${usuario.email}</td>
                                <td><span class="badge bg-${perfilClass}">${usuario.perfil}</span></td>
                                <td><span class="badge bg-${statusClass}">${statusText}</span></td>
                                <td><small>${usuario.dataCadastro}</small></td>
                                <td><small>${usuario.ultimoAcesso}</small></td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" onclick="viewUser(${usuario.id})">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-secondary btn-edit-user" onclick="editUser(${usuario.id})" style="display: none;">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-delete-user" onclick="deleteUser(${usuario.id})" style="display: none;">
                                            <i class="fas fa-ban"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `;
                        tbody.innerHTML += row;
                    });
                    
                    // Mostrar dados
                    document.getElementById('usersContent').style.display = 'none';
                    document.getElementById('usersData').style.display = 'block';
                    
                    // Aplicar permissões aos botões da tabela
                    checkUserPermissions();
                } else {
                    throw new Error('Erro ao carregar usuários');
                }
            } catch (error) {
                document.getElementById('usersContent').innerHTML = 
                    '<div class="alert alert-danger"><i class="fas fa-exclamation-triangle me-2"></i>Erro ao carregar usuários</div>';
            }
        }
        
        function checkUserPermissions() {
            const userData = JSON.parse(localStorage.getItem('user_data') || '{}');
            const userRole = userData.role;
            
            // Verificar permissões baseadas no role
            if (userRole === 'Admin') {
                // Admin pode fazer tudo com usuários
                document.getElementById('btnCreateUser').style.display = 'inline-block';
                document.getElementById('btnUserPermissions').style.display = 'inline-block';
                showUserEditDeleteButtons(true, true);
            } else if (userRole === 'Moderator') {
                // Moderator pode apenas visualizar usuários
                showUserEditDeleteButtons(false, false);
            } else {
                // User comum não pode nem ver a página de usuários
                document.getElementById('usersContent').innerHTML = 
                    '<div class="alert alert-warning"><i class="fas fa-exclamation-triangle me-2"></i>Você não tem permissão para acessar esta página.</div>';
                return;
            }
        }
        
        function showUserEditDeleteButtons(canEdit, canDelete) {
            setTimeout(() => {
                const editButtons = document.querySelectorAll('.btn-edit-user');
                const deleteButtons = document.querySelectorAll('.btn-delete-user');
                
                editButtons.forEach(btn => {
                    btn.style.display = canEdit ? 'inline-block' : 'none';
                });
                
                deleteButtons.forEach(btn => {
                    btn.style.display = canDelete ? 'inline-block' : 'none';
                });
            }, 500);
        }
        
        function viewUser(id) {
            alert('Visualizar usuário ID: ' + id);
        }
        
        async function createUser() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/users', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        nome: 'Novo Usuário',
                        email: 'novo@teste.com',
                        role: 'User'
                    })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    alert(result.message);
                    loadUsersData(); // Recarregar lista
                } else if (response.status === 403) {
                    alert('Você não tem permissão para criar usuários!');
                } else {
                    throw new Error('Erro ao criar usuário');
                }
            } catch (error) {
                alert('Erro: ' + error.message);
            }
        }
        
        async function editUser(id) {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch(`/api/users/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        nome: 'Usuário Editado',
                        email: 'editado@teste.com'
                    })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    alert(result.message);
                } else if (response.status === 403) {
                    alert('Você não tem permissão para editar usuários!');
                } else {
                    throw new Error('Erro ao editar usuário');
                }
            } catch (error) {
                alert('Erro: ' + error.message);
            }
        }
        
        async function deleteUser(id) {
            if (!confirm('Tem certeza que deseja desativar este usuário?')) return;
            
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch(`/api/users/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    alert(result.message);
                    loadUsersData(); // Recarregar lista
                } else if (response.status === 403) {
                    alert('Você não tem permissão para desativar usuários!');
                } else {
                    throw new Error('Erro ao desativar usuário');
                }
            } catch (error) {
                alert('Erro: ' + error.message);
            }
        }
        
        async function loadUserPermissions() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/users/admin/permissions', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const permissions = await response.json();
                    let message = 'Permissões do Sistema:\n\n';
                    
                    Object.keys(permissions.permissions).forEach(role => {
                        message += `${role}:\n`;
                        permissions.permissions[role].forEach(perm => {
                            message += `  - ${perm}\n`;
                        });
                        message += '\n';
                    });
                    
                    alert(message);
                } else if (response.status === 403) {
                    alert('Você não tem permissão para gerenciar permissões!');
                } else {
                    throw new Error('Erro ao carregar permissões');
                }
            } catch (error) {
                alert('Erro: ' + error.message);
            }
        }
    </script>
} 