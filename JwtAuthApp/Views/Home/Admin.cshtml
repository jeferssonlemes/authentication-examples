@{
    ViewData["Title"] = "Painel de Administra√ß√£o";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-cogs me-2"></i>Painel de Administra√ß√£o</h2>
            <p class="text-muted mb-0">Ferramentas avan√ßadas de administra√ß√£o e relat√≥rios</p>
        </div>
        <div>
            <span class="badge bg-info fs-6" id="userRoleBadge">Carregando...</span>
        </div>
    </div>

    <!-- Avisos de Permiss√£o -->
    <div id="accessDeniedAlert" class="alert alert-warning d-none">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <strong>Acesso Restrito:</strong> Voc√™ n√£o tem permiss√£o para acessar algumas funcionalidades desta p√°gina.
    </div>

    <div id="adminContent">
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
            <p class="mt-2">Verificando permiss√µes e carregando dados...</p>
        </div>
    </div>

    <div id="adminData" style="display: none;">
        <!-- Se√ß√£o: Apenas Admin (AdminOnly) -->
        <div id="adminOnlySection" style="display: none;">
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-danger">
                        <div class="card-header bg-danger text-white">
                            <h5 class="mb-0">
                                <i class="fas fa-shield-alt me-2"></i>√Årea Restrita - Apenas Administradores
                                <span class="badge bg-light text-danger ms-2">AdminOnly</span>
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6><i class="fas fa-server me-2"></i>Configura√ß√µes do Sistema</h6>
                                    <div id="systemConfig" class="mb-3">
                                        <p class="text-muted small">Clique no bot√£o para carregar configura√ß√µes...</p>
                                    </div>
                                    <button class="btn btn-danger btn-sm" onclick="loadSystemConfig()">
                                        <i class="fas fa-download me-1"></i>Carregar Configura√ß√µes
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm ms-2" onclick="updateSystemConfig()">
                                        <i class="fas fa-save me-1"></i>Atualizar Configura√ß√µes
                                    </button>
                                </div>
                                <div class="col-md-6">
                                    <h6><i class="fas fa-file-alt me-2"></i>Logs do Sistema</h6>
                                    <div id="systemLogs" class="mb-3">
                                        <p class="text-muted small">Clique no bot√£o para carregar logs...</p>
                                    </div>
                                    <button class="btn btn-danger btn-sm" onclick="loadSystemLogs()">
                                        <i class="fas fa-list me-1"></i>Ver Logs
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm ms-2" onclick="clearCache()">
                                        <i class="fas fa-trash me-1"></i>Limpar Cache
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Se√ß√£o: Admin e Moderator (ModeratorOrAbove) -->
        <div id="moderatorOrAboveSection" style="display: none;">
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-warning">
                        <div class="card-header bg-warning text-dark">
                            <h5 class="mb-0">
                                <i class="fas fa-chart-line me-2"></i>Relat√≥rios Avan√ßados - Moderadores e
                                Administradores
                                <span class="badge bg-dark ms-2">ModeratorOrAbove</span>
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6><i class="fas fa-chart-bar me-2"></i>Relat√≥rios Gerenciais</h6>
                                    <div id="reportsData" class="mb-3">
                                        <p class="text-muted small">Clique no bot√£o para gerar relat√≥rios...</p>
                                    </div>
                                    <button class="btn btn-warning btn-sm" onclick="loadReports()">
                                        <i class="fas fa-file-contract me-1"></i>Gerar Relat√≥rios
                                    </button>
                                </div>
                                <div class="col-md-6">
                                    <h6><i class="fas fa-chart-pie me-2"></i>Analytics Avan√ßado</h6>
                                    <div id="analyticsData" class="mb-3">
                                        <p class="text-muted small">Clique no bot√£o para ver analytics...</p>
                                    </div>
                                    <button class="btn btn-warning btn-sm" onclick="loadAnalytics()">
                                        <i class="fas fa-chart-pie me-1"></i>Ver Analytics
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Se√ß√£o: Demonstra√ß√£o de Acesso Negado -->
        <div class="row">
            <div class="col-12">
                <div class="card border-info">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-vial me-2"></i>Teste de Pol√≠ticas de Autoriza√ß√£o
                        </h5>
                    </div>
                    <div class="card-body">
                        <p>Use os bot√µes abaixo para testar como as pol√≠ticas funcionam com diferentes n√≠veis de
                            usu√°rio:</p>
                        <div class="row">
                            <div class="col-md-5">
                                <h6 class="text-danger">Pol√≠tica: AdminOnly</h6>
                                <p class="small text-muted">Teste todos os m√©todos HTTP - Apenas administradores</p>
                                <button class="btn btn-outline-success btn-sm mb-1 w-100"
                                    onclick="testHttpMethod('test-methods', 'GET', 'AdminOnly')">
                                    GET /test-methods
                                </button>
                                <button class="btn btn-outline-primary btn-sm mb-1 w-100"
                                    onclick="testHttpMethod('test-methods', 'POST', 'AdminOnly')">
                                    POST /test-methods
                                </button>
                                <button class="btn btn-outline-warning btn-sm mb-1 w-100"
                                    onclick="testHttpMethod('test-methods', 'PUT', 'AdminOnly')">
                                    PUT /test-methods
                                </button>
                                <button class="btn btn-outline-danger btn-sm mb-1 w-100"
                                    onclick="testHttpMethod('test-methods', 'DELETE', 'AdminOnly')">
                                    DELETE /test-methods
                                </button>
                                <hr class="my-2">
                                <button class="btn btn-outline-secondary btn-sm mb-1 w-100"
                                    onclick="testAdminOnly('clear-cache')">
                                    üóëÔ∏è Teste Original: Clear Cache
                                </button>
                            </div>
                            <div class="col-md-4">
                                <h6 class="text-warning">Pol√≠tica: ModeratorOrAbove</h6>
                                <p class="small text-muted">Teste todos os m√©todos HTTP - Moderadores e administradores
                                </p>
                                <button class="btn btn-outline-success btn-sm mb-1 w-100"
                                    onclick="testHttpMethod('test-methods-mod', 'GET', 'ModeratorOrAbove')">
                                    GET /test-methods-mod
                                </button>
                                <button class="btn btn-outline-primary btn-sm mb-1 w-100"
                                    onclick="testHttpMethod('test-methods-mod', 'POST', 'ModeratorOrAbove')">
                                    POST /test-methods-mod
                                </button>
                                <button class="btn btn-outline-warning btn-sm mb-1 w-100"
                                    onclick="testHttpMethod('test-methods-mod', 'PUT', 'ModeratorOrAbove')">
                                    PUT /test-methods-mod
                                </button>
                                <button class="btn btn-outline-danger btn-sm mb-1 w-100"
                                    onclick="testHttpMethod('test-methods-mod', 'DELETE', 'ModeratorOrAbove')">
                                    DELETE /test-methods-mod
                                </button>
                            </div>
                            <div class="col-md-3">
                                <h6 class="text-info">Resultado dos Testes</h6>
                                <div id="testResults" class="border rounded p-2 bg-light"
                                    style="min-height: 200px; max-height: 300px; overflow-y: auto;">
                                    <p class="text-muted mb-0 small">Os resultados dos testes aparecer√£o aqui...</p>
                                </div>
                                <button class="btn btn-outline-info btn-sm mt-2 w-100" onclick="clearTestResults()">
                                    üßπ Limpar Resultados
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Mostrar navbar
        document.getElementById('mainNav').style.display = 'block';

        // Verificar autentica√ß√£o
        checkAuthentication();

        // Verificar permiss√µes e carregar dados
        checkAdminPermissions();

        function checkAdminPermissions() {
            const userData = JSON.parse(localStorage.getItem('user_data') || '{}');
            const userRole = userData.role;

            // Atualizar badge do usu√°rio
            document.getElementById('userRoleBadge').textContent = `N√≠vel: ${userRole}`;
            document.getElementById('userRoleBadge').className = `badge fs-6 ${userRole === 'Admin' ? 'bg-danger' : userRole === 'Moderator' ? 'bg-warning' : 'bg-secondary'}`;

            // Verificar permiss√µes
            if (userRole === 'Admin') {
                // Admin v√™ tudo
                document.getElementById('adminOnlySection').style.display = 'block';
                document.getElementById('moderatorOrAboveSection').style.display = 'block';
            } else if (userRole === 'Moderator') {
                // Moderator v√™ apenas se√ß√£o ModeratorOrAbove
                document.getElementById('moderatorOrAboveSection').style.display = 'block';
                document.getElementById('accessDeniedAlert').classList.remove('d-none');
            } else {
                // User comum n√£o v√™ nada especial
                document.getElementById('accessDeniedAlert').classList.remove('d-none');
                document.getElementById('accessDeniedAlert').innerHTML =
                    '<i class="fas fa-ban me-2"></i><strong>Acesso Negado:</strong> Voc√™ n√£o tem permiss√£o para acessar as funcionalidades administrativas.';
                document.getElementById('accessDeniedAlert').className = 'alert alert-danger';
            }

            // Mostrar dados
            document.getElementById('adminContent').style.display = 'none';
            document.getElementById('adminData').style.display = 'block';
        }

        // Fun√ß√µes para carregar dados AdminOnly
        async function loadSystemConfig() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/admin/system-config', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('systemConfig').innerHTML = `
                                                                                                                                                                                        <div class="small">
                                                                                                                                                                                            <strong>Servidor:</strong> ${data.configs.serverName}<br>
                                                                                                                                                                                            <strong>Vers√£o:</strong> ${data.configs.version}<br>
                                                                                                                                                                                            <strong>Ambiente:</strong> ${data.configs.environment}<br>
                                                                                                                                                                                            <strong>M√°x. Usu√°rios:</strong> ${data.configs.maxUsers}
                                                                                                                                                                                        </div>`;
                } else if (response.status === 403) {
                    document.getElementById('systemConfig').innerHTML = '<div class="text-danger small">‚ùå Acesso negado!</div>';
                }
            } catch (error) {
                document.getElementById('systemConfig').innerHTML = '<div class="text-danger small">‚ùå Erro: ' + error.message + '</div>';
            }
        }

        async function loadSystemLogs() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/admin/system-logs', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('systemLogs').innerHTML = `
                                                                                                                                                                                        <div class="small">
                                                                                                                                                                                            <strong>Total de Entradas:</strong> ${data.totalEntries}<br>
                                                                                                                                                                                            <strong>Erros Cr√≠ticos:</strong> ${data.criticalErrors}<br>
                                                                                                                                                                                            <strong>Avisos:</strong> ${data.warnings}<br>
                                                                                                                                                                                            <strong>√öltimas entradas:</strong> ${data.logs.length}
                                                                                                                                                                                        </div>`;
                } else if (response.status === 403) {
                    document.getElementById('systemLogs').innerHTML = '<div class="text-danger small">‚ùå Acesso negado!</div>';
                }
            } catch (error) {
                document.getElementById('systemLogs').innerHTML = '<div class="text-danger small">‚ùå Erro: ' + error.message + '</div>';
            }
        }

        async function updateSystemConfig() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/admin/system-config', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ updated: true })
                });

                if (response.ok) {
                    const data = await response.json();
                    alert('‚úÖ ' + data.message);
                } else if (response.status === 403) {
                    alert('‚ùå Acesso negado! Apenas administradores podem atualizar configura√ß√µes.');
                }
            } catch (error) {
                alert('‚ùå Erro: ' + error.message);
            }
        }

        async function clearCache() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/admin/clear-cache', {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    alert('‚úÖ ' + data.message);
                } else if (response.status === 403) {
                    alert('‚ùå Acesso negado! Apenas administradores podem limpar o cache.');
                } else {
                    alert(`‚ùå Erro: Status ${response.status}`);
                }
            } catch (error) {
                alert('‚ùå Erro: ' + error.message);
            }
        }

        // Fun√ß√£o de teste tempor√°ria usando GET
        async function testClearCacheWithGet() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/admin/clear-cache-test', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    alert('‚úÖ Teste GET funcionou: ' + data.message);
                } else if (response.status === 403) {
                    alert('‚ùå Teste GET tamb√©m falhou com 403');
                } else {
                    alert('‚ùå Teste GET falhou com status: ' + response.status);
                }
            } catch (error) {
                alert('‚ùå Erro no teste GET: ' + error.message);
            }
        }

        // Fun√ß√µes para carregar dados ModeratorOrAbove
        async function loadReports() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/admin/reports', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('reportsData').innerHTML = `
                                                                                                                                                                                        <div class="small">
                                                                                                                                                                                            <strong>Usu√°rios Ativos:</strong> ${data.reports.userActivity.activeUsers}<br>
                                                                                                                                                                                            <strong>Total de Logins:</strong> ${data.reports.userActivity.totalLogins}<br>
                                                                                                                                                                                            <strong>Produtos:</strong> ${data.reports.productStats.totalProducts}<br>
                                                                                                                                                                                            <strong>Uptime:</strong> ${data.reports.systemPerformance.uptime}
                                                                                                                                                                                        </div>`;
                } else if (response.status === 403) {
                    document.getElementById('reportsData').innerHTML = '<div class="text-danger small">‚ùå Acesso negado!</div>';
                }
            } catch (error) {
                document.getElementById('reportsData').innerHTML = '<div class="text-danger small">‚ùå Erro: ' + error.message + '</div>';
            }
        }

        async function loadAnalytics() {
            try {
                const token = localStorage.getItem('jwt_token');
                const response = await fetch('/api/admin/analytics', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('analyticsData').innerHTML = `
                                                                                                                                                                                        <div class="small">
                                                                                                                                                                                            <strong>Taxa de Convers√£o:</strong> ${data.analytics.conversionRate}%<br>
                                                                                                                                                                                            <strong>Feature Mais Popular:</strong> ${data.analytics.popularFeatures[0].feature}<br>
                                                                                                                                                                                            <strong>Distribui√ß√£o:</strong> Brasil ${data.analytics.geographicDistribution.brazil}%<br>
                                                                                                                                                                                            <strong>Insights:</strong> ${data.insights.length} dispon√≠veis
                                                                                                                                                                                        </div>`;
                } else if (response.status === 403) {
                    document.getElementById('analyticsData').innerHTML = '<div class="text-danger small">‚ùå Acesso negado!</div>';
                }
            } catch (error) {
                document.getElementById('analyticsData').innerHTML = '<div class="text-danger small">‚ùå Erro: ' + error.message + '</div>';
            }
        }

        // Fun√ß√£o principal para testar todos os m√©todos HTTP
        async function testHttpMethod(endpoint, method, policy) {
            const token = localStorage.getItem('jwt_token');
            const userData = JSON.parse(localStorage.getItem('user_data') || '{}');

            try {
                const fetchOptions = {
                    method: method,
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                };

                // Adicionar Content-Type e body para POST/PUT
                if (method === 'POST' || method === 'PUT') {
                    fetchOptions.headers['Content-Type'] = 'application/json';
                    fetchOptions.body = JSON.stringify({
                        test: true,
                        method: method,
                        timestamp: new Date().toISOString()
                    });
                }

                const response = await fetch(`/api/admin/${endpoint}`, fetchOptions);

                let responseData = null;
                try {
                    responseData = await response.json();
                } catch (e) {
                    responseData = { message: 'Resposta n√£o √© JSON v√°lido' };
                }

                const resultHtml = `
                                <div class="border-bottom pb-2 mb-2">
                                    <div class="small">
                                        <strong>${method} /${endpoint}</strong> (${policy})<br>
                                        <strong>Usu√°rio:</strong> ${userData.role}<br>
                                        <strong>Status:</strong> <span class="${response.ok ? 'text-success' : 'text-danger'}">${response.status}</span><br>
                                        <strong>Resultado:</strong> ${response.ok ? '‚úÖ Sucesso' : '‚ùå Falhou'}<br>
                                        ${response.ok ? `<strong>Resposta:</strong> ${responseData.message || 'OK'}` : `<strong>Erro:</strong> ${responseData.error || 'Acesso negado'}`}<br>
                                        <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                                    </div>
                                </div>
                            `;

                appendTestResults(resultHtml);
            } catch (error) {
                const errorHtml = `
                                <div class="border-bottom pb-2 mb-2">
                                    <div class="text-danger small">
                                        <strong>${method} /${endpoint}</strong> (${policy})<br>
                                        <strong>‚ùå Erro:</strong> ${error.message}<br>
                                        <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                                    </div>
                                </div>
                            `;
                appendTestResults(errorHtml);
            }
        }

        // Fun√ß√£o para testar o endpoint original de clear-cache
        async function testAdminOnly(endpoint) {
            const token = localStorage.getItem('jwt_token');
            const userData = JSON.parse(localStorage.getItem('user_data') || '{}');

            try {
                const fetchOptions = {
                    headers: { 'Authorization': `Bearer ${token}` }
                };

                // Usar DELETE apenas para clear-cache
                if (endpoint === 'clear-cache') {
                    fetchOptions.method = 'DELETE';
                }

                const response = await fetch(`/api/admin/${endpoint}`, fetchOptions);

                let responseData = null;
                try {
                    responseData = await response.json();
                } catch (e) {
                    responseData = { message: 'Resposta n√£o √© JSON v√°lido' };
                }

                const resultHtml = `
                                <div class="border-bottom pb-2 mb-2">
                                    <div class="small">
                                        <strong>DELETE /${endpoint}</strong> (Original)<br>
                                        <strong>Usu√°rio:</strong> ${userData.role}<br>
                                        <strong>Status:</strong> <span class="${response.ok ? 'text-success' : 'text-danger'}">${response.status}</span><br>
                                        <strong>Resultado:</strong> ${response.ok ? '‚úÖ Sucesso' : '‚ùå Falhou'}<br>
                                        ${response.ok ? `<strong>Resposta:</strong> ${responseData.message || 'OK'}` : `<strong>Erro:</strong> Acesso negado`}<br>
                                        <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                                    </div>
                                </div>
                            `;
                appendTestResults(resultHtml);
            } catch (error) {
                const errorHtml = `
                                <div class="border-bottom pb-2 mb-2">
                                    <div class="text-danger small">
                                        <strong>DELETE /${endpoint}</strong> (Original)<br>
                                        <strong>‚ùå Erro:</strong> ${error.message}<br>
                                        <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                                    </div>
                                </div>
                            `;
                appendTestResults(errorHtml);
            }
        }

        function appendTestResults(html) {
            const resultsDiv = document.getElementById('testResults');
            if (resultsDiv.innerHTML.includes('Os resultados dos testes aparecer√£o aqui')) {
                resultsDiv.innerHTML = html;
            } else {
                resultsDiv.innerHTML = html + resultsDiv.innerHTML;
            }
            resultsDiv.scrollTop = 0; // Scroll para o topo para ver o resultado mais recente
        }

        function clearTestResults() {
            document.getElementById('testResults').innerHTML = '<p class="text-muted mb-0 small">Os resultados dos testes aparecer√£o aqui...</p>';
        }
    </script>
}